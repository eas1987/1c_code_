// BSLLS-off
Функция ПолучитьШтатнуюРасстановку(ПодразделенияНулевогоУровня = Неопределено, АнализироватьУволенных = Ложь, ГруппыИсключения = Неопределено) Экспорт 
	
	Если ПодразделенияНулевогоУровня = Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Должности.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Должности КАК Должности
		               |ГДЕ
		               |	Должности.Родитель = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		               |	И Должности.ЭтоГруппа
		               |	И НЕ Должности.ПометкаУдаления";
		
		ПодразделенияНулевогоУровня = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Группы", ПодразделенияНулевогоУровня);
	
	Если ТипЗнч(ГруппыИсключения) <> Тип("Массив") Тогда 
		ГруппыИсключения = Новый Массив;
	КонецЕсли;
	ГруппыИсключения.Добавить(Справочники.Должности.НайтиПоНаименованию("Корзина"));	
	Запрос.УстановитьПараметр("ГруппыИсключения", ГруппыИсключения); 
		
	//{{ Подготовка нулевого уровня
	Запрос.Текст = "ВЫБРАТЬ
	               |	Должности.Родитель.Родитель КАК ПодразделениеРодитель,
	               |	Должности.Родитель КАК Подразделение,
	               |	Должности.Ссылка КАК Должность,
	               |	Должности.ЭтоГруппа КАК ЭтоГруппа,
	               |	Должности.Руководитель КАК Руководитель,
				   |	Должности.ГлаваБЮ КАК ГлаваБЮ,
	               |	0 КАК Уровень
	               |ПОМЕСТИТЬ ВтУровень0
	               |ИЗ
	               |	Справочник.Должности КАК Должности
	               |ГДЕ
	               |	НЕ Должности.ПометкаУдаления
	               |	И Должности.Родитель В(&Группы)
	               |	И НЕ Должности.Родитель В (&ГруппыИсключения)
				   |";
	
	Запрос.Выполнить();
	//}} 
	
 	ШаблонТекстаЗапроса = "ВЫБРАТЬ
	                      |	ВтУровень_Пред.ПодразделениеРодитель КАК ПодразделениеРодитель,
	                      |	ВтУровень_Пред.Подразделение КАК Подразделение,
	                      |	ВтУровень_Пред.Должность КАК Должность,
	                      |	ВтУровень_Пред.ЭтоГруппа КАК ЭтоГруппа,
	                      |	ВтУровень_Пред.Руководитель КАК Руководитель,
						  |	ВтУровень_Пред.ГлаваБЮ КАК ГлаваБЮ,
	                      |	ВтУровень_Пред.Уровень КАК Уровень
	                      |ПОМЕСТИТЬ ВтУровень_Тек
	                      |ИЗ
	                      |	ВтУровень_Пред КАК ВтУровень_Пред
	                      |ГДЕ
	                      |	НЕ ВтУровень_Пред.ЭтоГруппа
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Должности.Родитель.Родитель,
	                      |	Должности.Родитель,
	                      |	Должности.Ссылка,
	                      |	Должности.ЭтоГруппа,
	                      |	Должности.Руководитель,
						  |	Должности.ГлаваБЮ КАК ГлаваБЮ,
	                      |	&ИндексУровня
	                      |ИЗ
	                      |	ВтУровень_Пред КАК ВтУровень_Пред
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	                      |		ПО ВтУровень_Пред.Должность = Должности.Родитель
	                      |			И (ВтУровень_Пред.ЭтоГруппа)
	                      |ГДЕ
	                      |	НЕ Должности.ПометкаУдаления
						  |	И НЕ Должности.Родитель В (&ГруппыИсключения)
						  |";	
	
	ШаблонТекстаЗапроса_ПроверкаРазузлования = "ВЫБРАТЬ ПЕРВЫЕ 1
	                                           |	ВтУровень_Тек.Должность КАК Должность
	                                           |ИЗ
	                                           |	ВтУровень_Тек КАК ВтУровень_Тек
	                                           |ГДЕ
	                                           |	ВтУровень_Тек.ЭтоГруппа";
											   
											   
	ИндексУровня = 1;
	Пока Истина Цикл 
		
		Если ИндексУровня >= 300 Тогда 
			ВызватьИсключение "Ошибка при попытке получения структуры должностей организации: превышен максимальный уровень вложенности.";	
		КонецЕсли;
				
		ИмяПредТаблицы = "ВтУровень" + (ИндексУровня - 1);
		ИмяТекТаблицы =  "ВтУровень" + ИндексУровня;
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ВтУровень_Пред", ИмяПредТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтУровень_Тек", ИмяТекТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИндексУровня", ИндексУровня);
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		Запрос.Текст = "Уничтожить " + ИмяПредТаблицы;
		Запрос.Выполнить();
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса_ПроверкаРазузлования, "ВтУровень_Тек", ИмяТекТаблицы);
		Запрос.Текст = ТекстЗапроса;
		РезкльтатПроверки = Запрос.Выполнить();
		Если РезкльтатПроверки.Пустой() Тогда 
			Прервать;	
		КонецЕсли;
				
		ИндексУровня = ИндексУровня + 1;
		
	КонецЦикла;
	
	//Запрос.Текст = "Выбрать * из "+ИмяТекТаблицы + " как "+ИмяТекТаблицы;
	//ТабРез = Запрос.Выполнить().Выгрузить();
	
	ШаблонТекстаЗапросаРезультат = "ВЫБРАТЬ
	                               |	ВтУровень_Тек.ПодразделениеРодитель КАК ПодразделениеРодитель,
	                               |	ВтУровень_Тек.Подразделение КАК Подразделение,
	                               |	ВтУровень_Тек.Должность КАК Должность,
	                               |	ВтУровень_Тек.ЭтоГруппа КАК ЭтоГруппа,
	                               |	ВтУровень_Тек.Руководитель КАК Руководитель,
								   |	ВтУровень_Тек.ГлаваБЮ КАК ГлаваБЮ,
	                               |	ВтУровень_Тек.Уровень КАК Уровень,
	                               |	СтавкиРабочихСрезПоследних.Рабочий КАК Рабочий,
	                               |	СтатусыРабочихСрезПоследних.Статус КАК Статус,
	                               |	Должности.КатегорияИТР КАК КатегорияИТР,
	                               |	СтавкиРабочихСрезПоследних.Рабочий.Наименование КАК СотрудникФИО,
	                               |	СтавкиРабочихСрезПоследних.Рабочий.ОсновноеФизЛицо КАК ОсновноеФизЛицо
	                               |ИЗ
	                               |	ВтУровень_Тек КАК ВтУровень_Тек
	                               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиРабочих.СрезПоследних КАК СтавкиРабочихСрезПоследних
	                               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыРабочих.СрезПоследних КАК СтатусыРабочихСрезПоследних
	                               |			ПО СтавкиРабочихСрезПоследних.Рабочий = СтатусыРабочихСрезПоследних.Рабочий
	                               |		ПО ВтУровень_Тек.Должность = СтавкиРабочихСрезПоследних.Специальность
	                               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	                               |		ПО ВтУровень_Тек.Должность = Должности.Ссылка
	                               |ГДЕ
	                               |	ВЫБОР
	                               |			КОГДА &АнализироватьУволенных
	                               |				ТОГДА ИСТИНА
	                               |			ИНАЧЕ СтатусыРабочихСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРаботников.Уволен)
	                               |		КОНЕЦ";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапросаРезультат, "ВтУровень_Тек", ИмяТекТаблицы);	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("АнализироватьУволенных", АнализироватьУволенных); 
	ВыгрузкаЗапроса = Запрос.Выполнить().Выгрузить(); 
	
	
	ТабШтатнаяРасстановка = ВыгрузкаЗапроса;					
	ТабШтатнаяРасстановка.Индексы.Добавить("ПодразделениеРодитель, Подразделение, Должность, Руководитель, ГлаваБЮ, Уровень, Рабочий, КатегорияИТР");
	
	
	ТабСвязиИерархии = ПолучитьТаблицу_СвязиИерархии(ГруппыИсключения);
	Для Каждого СтрТЗ_СвязиИерархии Из ТабСвязиИерархии Цикл 
		
		МассивНайденныхСтрок = ТабШтатнаяРасстановка.НайтиСтроки(Новый Структура("ПодразделениеРодитель, Подразделение", СтрТЗ_СвязиИерархии.ПодразделениеРодитель, СтрТЗ_СвязиИерархии.Подразделение));
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			НоваяСтрока = ТабШтатнаяРасстановка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТЗ_СвязиИерархии);
		КонецЕсли;
				
	КонецЦикла;
		
	Возврат ТабШтатнаяРасстановка;	
	
КонецФункции

Функция ПолучитьТаблицу_СвязиИерархии(Исключения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Должности.Родитель КАК ПодразделениеРодитель,
	               |	Должности.Ссылка КАК Подразделение,
	               |	ЛОЖЬ КАК Руководитель
	               |ИЗ
	               |	Справочник.Должности КАК Должности
	               |ГДЕ
	               |	Должности.ЭтоГруппа
	               |	И НЕ Должности.ПометкаУдаления
	               |	И НЕ Должности.Ссылка В ИЕРАРХИИ (&Исключения)";
	
	Запрос.УстановитьПараметр("Исключения", Исключения);
	
	ТабСвязиИерархии = Запрос.Выполнить().Выгрузить();
		
	Возврат ТабСвязиИерархии;
	
КонецФункции

Функция ПолучитьДанныеСотрудника(ТабШтатнаяРасстановка, Знач СотрудникФизЛицо, Знач ИскатьПоКолонке ="Рабочий") Экспорт 
	
	Если НЕ ТипЗнч(СотрудникФизЛицо) = Тип("СправочникСсылка.Посетители") Тогда 
		Если ТипЗнч(СотрудникФизЛицо) = Тип("СправочникСсылка.Пользователи") Тогда 
			СотрудникФизЛицо = СотрудникФизЛицо.Посетитель;
		КонецЕсли;
	Иначе
	КонецЕсли;
	
	ДанныеПоСотруднику = Неопределено;
	НайденныеСтроки = ТабШтатнаяРасстановка.НайтиСтроки(Новый Структура(ИскатьПоКолонке, СотрудникФизЛицо));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеПоСотруднику = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат ДанныеПоСотруднику;
		
КонецФункции

Процедура ЗаполнитьМассивРуководителейСотрудника(ТабШтатнаяРасстановка, Подразделение, МассивРуководителей) Экспорт
	
	МассивНайденныхСтрок = ТабШтатнаяРасстановка.НайтиСтроки(Новый Структура("Подразделение", Подразделение, Истина));
	СписокПодразделенийРодителей = Новый Соответствие;
	Для Каждого ЭлементМассива Из МассивНайденныхСтрок Цикл
		
		СписокПодразделенийРодителей.Вставить(ЭлементМассива.ПодразделениеРодитель);
		
		Если ЭлементМассива.Руководитель Тогда 
			МассивРуководителей.Добавить(ЭлементМассива);	
		КонецЕсли;
				
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из СписокПодразделенийРодителей Цикл
		ЗаполнитьМассивРуководителейСотрудника(ТабШтатнаяРасстановка, ЭлементСоответствия.Ключ, МассивРуководителей)		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьБлижайшегоРуководителя(ТабШтатнаяРасстановка, ДанныеСотрудника, СотрудникиИсключения = Неопределено) Экспорт 
	
	МассивРуководителей = Новый Массив;
	ЗаполнитьМассивРуководителейСотрудника(ТабШтатнаяРасстановка, ДанныеСотрудника.Подразделение, МассивРуководителей);
	
	ТабРуководителей = ТабШтатнаяРасстановка.Скопировать(МассивРуководителей);
	ТабРуководителей.Сортировать("Уровень Убыв");
	
	БлижайшийРуководитель = Неопределено;
	Для Каждого СтрТЗ_ТабРуководителей Из ТабРуководителей Цикл 
		
		Если БлижайшийРуководитель <> Неопределено Тогда 
			Прервать;
		КонецЕсли;			
		
		Если СтрТЗ_ТабРуководителей.Статус = Перечисления.СтатусыРаботников.Уволен Тогда 
			Продолжить;	
		КонецЕсли;
		
		Если ТипЗнч(СотрудникиИсключения) = Тип("Соответствие") 
			И СотрудникиИсключения[СтрТЗ_ТабРуководителей.Рабочий] <> Неопределено
			Тогда
			
			Продолжить;
			
		КонецЕсли;
				
		БлижайшийРуководитель = СтрТЗ_ТабРуководителей;
		
	КонецЦикла;
	
	Возврат БлижайшийРуководитель;	
	
КонецФункции

//! НЕ использовать в циклах без кэширования таблицы "ТабШтатнаяРасстановка", использовать ТабШтатнаяРасстановка = ПользователиСлужебныйПовтИсп.ПолучитьШтатнуюРасстановкуПовтИсп()
Функция ПолучитьРуководителяСотрудника(Сотрудник, Знач ТабШтатнаяРасстановка = Неопределено) Экспорт 
	
	Если ТабШтатнаяРасстановка = Неопределено Тогда 
		ТабШтатнаяРасстановка = ПолучитьШтатнуюРасстановку();
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Сотрудник", Сотрудник);	
	Результат.Вставить("РуководительСотрудника", Неопределено);
	Результат.Вставить("РуководительОсновноеФизЛицо", Неопределено);
	
	ЗаполнитьРуководителя(ТабШтатнаяРасстановка, Результат, "Сотрудник");
	
	Если ЗначениеЗаполнено(Результат.РуководительОсновноеФизЛицо) Тогда 
		Возврат Результат.РуководительОсновноеФизЛицо;
	КонецЕсли;
		
	Возврат Результат.РуководительСотрудника;	
	
КонецФункции

//Параметры:
//	ТабШтатнаяРасстановка: Таблица штатной расстановкеи полученная методом ФизическиеЛица.ПолучитьШтатнуюРасстановку().
//	СтрТЗ: Строка таблицы значений с обязательными колонками "РуководительСотрудника", "РуководительОсновноеФизЛицо" (тип "Посетители").
//	ИмяКолонкиСотрудник: имя колонки строки таблицы значений, в которой содержится сотрудник (для которого определяем руководителя).
//	ФизЛицаРуководителей: выходной массив: все подобранные руководители. 
//
Процедура ЗаполнитьРуководителя(ТабШтатнаяРасстановка, СтрТЗ, ИмяКолонкиСотрудник, ФизЛицаРуководителей = Неопределено) Экспорт 
	
	ДанныеСотрудника = ПолучитьДанныеСотрудника(ТабШтатнаяРасстановка, СтрТЗ[ИмяКолонкиСотрудник]);
	Если ДанныеСотрудника = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СотрудникиИсключения = Неопределено;
	Если ДанныеСотрудника.Руководитель Тогда 
		СотрудникиИсключения = Новый Соответствие;
		СотрудникиИсключения.Вставить(ДанныеСотрудника.Рабочий, Истина);
	КонецЕсли;
	
	ДанныеРуководителя = ПолучитьБлижайшегоРуководителя(ТабШтатнаяРасстановка, ДанныеСотрудника, СотрудникиИсключения);
	Если ДанныеРуководителя <> Неопределено Тогда 
		
		РуководительСотрудника = ДанныеРуководителя.Рабочий;
		СтрТЗ.РуководительСотрудника = РуководительСотрудника;			
		Если ЗначениеЗаполнено(РуководительСотрудника) 
			И ТипЗнч(ФизЛицаРуководителей) = Тип("Массив")
			Тогда
			ФизЛицаРуководителей.Добавить(РуководительСотрудника);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеРуководителя.ОсновноеФизЛицо) Тогда
			
			СтрТЗ.РуководительОсновноеФизЛицо = ДанныеРуководителя.ОсновноеФизЛицо;
			
			Если ТипЗнч(ФизЛицаРуководителей) = Тип("Массив") Тогда 
				ФизЛицаРуководителей.Добавить(ДанныеРуководителя.ОсновноеФизЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры